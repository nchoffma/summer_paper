# θ distribution: Pareto Lognormal
const α = 3.0
const μ_θ = -1.0 / α
const σ_θ = 0.5 

# Initial Guesses
R = 1.03
λ_1 = 1.0

# p = [σ, γ, ψ, α, μ_θ, σ_θ]

function normcdf(x)
    cdf.(Normal(), x) 
end

function normpdf(x)
    pdf.(Normal(), x)
end

function plogncdf(x, α, ν, τ)
    # Calculates F(x) and f(x) for a Pareto-Lognormal distribution
    
    if x < 0.0
        p = 0.0
        d = 0.0
    else
        arg1 = (log(x)-ν) / τ
        arg2 = (log(x) - ν - α * τ ^ 2) / τ
        A = exp(α .* ν + 0.5 * α ^ 2 * τ ^ 2)
        p = normcdf(arg1) - x ^ (-α) * A * normcdf(arg2) # CDF
        d = α * x ^ (-α - 1.0) * A * normcdf(arg2)       # PDF
    end
    return p, d
end

function ft_plogn(x, α, ν, τ)
    # Calculates f(θ) and f′(θ), where f() is the CDF for the PLN dist 

    ~, ft = plogncdf(x, α, ν, τ)
    fpt = -(α + 1.0) * ft / x + exp(α * ν + α ^ 2 * τ ^ 2 / 2.0) * α * x ^ (-α - 1.0) * 
        normpdf( (log(x) - ν -α * τ ^2 ) / τ) / τ / x
    return ft, fpt

end

function parloginv(p, α, ν, τ)
    # Calculates inverse of PLN, given p∈[0,1]
    x = α / (α - 1) * exp(ν + τ ^ 2 / 2) 

    f = 10.0
    while abs(f) > 1e-8
        P, D = plogncdf(x, α, ν, τ)
        f = P - p
        df = D
        d = f / df 
        while x - d < 0
            d = d / 2
        end
        x = x - d
    end
    return x

end

# # Why do the low types have such large k?
# t = tgrid[2]
# U = U_opt[2]
# μ = μ_opt[2]
# c0 = μ / (λ_1 * t * (R - t))
# c1 = exp(1.0 / β * (U - log(c0)))
# k = λ_1 * t * c0 ^ 2 / μ * (c1 / (β * c0) - R)